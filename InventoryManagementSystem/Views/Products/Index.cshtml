@{
    ViewBag.Title = "Products";
}

<div class="position-fixed top-0 end-0 p-3" style="z-index: 1080;">
  <div id="productToast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
      <div class="toast-body" id="productToastBody">
        <!-- Message will go here -->
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
  </div>
</div>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div class="d-flex align-items-center gap-3">
        <i class="bi bi-box-seam fs-2 text-primary"></i>
        <h2 class="m-0 fw-bold">Products</h2>
    </div>
    <button class="btn btn-primary btn-lg d-flex align-items-center gap-2" onclick="openAddProductModal()">
        <i class="bi bi-plus-circle fs-5"></i> Add Product
    </button>
</div>

<table class="table table-hover" id="productTable">
    <thead class="table-light">
        <tr>
            <th>Name</th>
            <th>Category</th>
            <th>Supplier</th>
            <th>Price</th>
            <th>Stock</th>
            <th>Is Active</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<!-- Add/Edit Modal -->
<div class="modal fade" id="productModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow">
            <form id="productForm">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="productModalTitle">Add Product</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="productId" />
                    <input type="text" id="productName" class="form-control mb-2" placeholder="Name" />
                    <textarea id="productDescription" class="form-control mb-2" placeholder="Description"></textarea>
                    <input type="number" id="productPrice" step="0.01" min="0" class="form-control mb-2" placeholder="Price">
                    <input type="number" id="productStock" min="1" class="form-control mb-2" placeholder="Stock Quantity">
                    <select id="productCategory" class="form-select mb-2"></select>
                    <select id="productSupplier" class="form-select mb-2"></select>
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnSaveProduct" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteProductModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Delete Product</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this product?
            </div>
            <div class="modal-footer">
                <button type="button" id="btnConfirmDeleteProduct" class="btn btn-danger">Delete</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<!-- Details Modal -->
<div class="modal fade" id="productDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title">Product Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p><strong>Name:</strong> <span id="detailName"></span></p>
                <p><strong>Description:</strong> <span id="detailDescription"></span></p>
                <p><strong>Price:</strong> $<span id="detailPrice"></span></p>
                <p><strong>Stock Quantity:</strong> <span id="detailStock"></span></p>
                <p><strong>Category:</strong> <span id="detailCategory"></span></p>
                <p><strong>Supplier:</strong> <span id="detailSupplier"></span></p>
                <p><strong>Created At:</strong> <span id="detailCreatedAt"></span></p>
                <p><strong>Created By:</strong> <span id="detailCreatedBy"></span></p>
                <p><strong>Updated At:</strong> <span id="detailUpdatedAt"></span></p>
                <p><strong>Updated By:</strong> <span id="detailUpdatedBy"></span></p>
                <p><strong>Is Active:</strong> <input type="checkbox" id="detailIsActive" disabled></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>

        // Load categories and suppliers for dropdowns
            async function loadDropdowns() {
            const categories = await $.get('/Categories/GetAll');
            const suppliers = await $.get('/Suppliers/GetAll');

            // Categories dropdown (all categories)
            let categoryOptions = '<option value="">Select Category</option>';
            categories.forEach(c => {
                categoryOptions += `<option value="${c.id}">${c.name}</option>`;
            });
            $('#productCategory').html(categoryOptions);

            // Suppliers dropdown (only active suppliers)
            let supplierOptions = '<option value="">Select Supplier</option>';
            suppliers
                .filter(s => s.isActive) // only active suppliers
                .forEach(s => {
                    supplierOptions += `<option value="${s.id}">${s.name}</option>`;
                });
            $('#productSupplier').html(supplierOptions);
        }


        // Open modal to add product
               let deleteProductId = 0;

             async function openAddProductModal() {
            $('#productModalTitle').text('Add Product');
            $('#productId').val(0);
            $('#productName').val('');
            $('#productDescription').val('');
            $('#productPrice').val('');
            $('#productStock').val('');

            await loadDropdowns(); // wait for dropdowns to fill

            new bootstrap.Modal(document.getElementById('productModal')).show();
        }

            async function openEditProductModal(id) {
            $('#productModalTitle').text('Edit Product');
            $('#productId').val(id);

            // Fetch product data from server
            $.get('/Products/GetById/' + id, function(p) {
                $('#productName').val(p.name);
                $('#productDescription').val(p.description);
                $('#productPrice').val(p.price);
                $('#productStock').val(p.stockQuantity);

                // Load dropdowns then set selected values
                loadDropdowns().then(() => {
                    $('#productCategory').val(p.categoryId);
                    $('#productSupplier').val(p.supplierId);
                });

                new bootstrap.Modal(document.getElementById('productModal')).show();
            }).fail(function() {
                alert('Failed to load product data.');
            });
        }



        function openDeleteProductModal(id) {
            deleteProductId = id;
            var modalEl = document.getElementById('deleteProductModal');
            if (!modalEl.modalInstance) modalEl.modalInstance = new bootstrap.Modal(modalEl);
            modalEl.modalInstance.show();
        }

              $('#btnSaveProduct').click(function() {
            const productId = parseInt($('#productId').val()) || 0;
            const isEdit = productId > 0; // if >0, it's edit

            var product = {
                Id: productId,
                Name: $('#productName').val(),
                Description: $('#productDescription').val(),
                Price: parseFloat($('#productPrice').val()),
                StockQuantity: parseInt($('#productStock').val()),
                CategoryId: parseInt($('#productCategory').val()),
                SupplierId: parseInt($('#productSupplier').val())
            };

            $.ajax({
                type: 'POST',
                url: '/Products/CreateOrEdit',
                contentType: 'application/json',
                data: JSON.stringify(product),
                success: function(response) {
                    if (response.success) {
                        // Close modal
                        bootstrap.Modal.getInstance(document.getElementById('productModal')).hide();
                        // Reload products
                        loadProducts();
                        // Show proper toast
                        const msg = isEdit ? 'Product updated successfully!' : 'Product added successfully!';
                        showToast(msg, 'success');
                    } else {
                        alert('Error: ' + (response.error || 'Unknown'));
                    }
                },
                error: function() {
                    alert('Unexpected error occurred');
                }
            });
        });


        function toggleActive(productId) {
            const checkbox = $(`#toggleActive_${productId}`);
            const isActive = checkbox.is(':checked');

            $.ajax({
                url: `/Products/ToggleActive/${productId}`,
                type: 'POST',
                data: { isActive: isActive },
                                success: function() {
                        $(`#toggleActive_${productId}`).next('label').text(isActive ? 'Active' : 'Inactive');
                        const type = isActive ? 'success' : 'secondary';
                        showToast(`Product marked as ${isActive ? 'Active' : 'Inactive'}`, type);
                    }
                    ,
                error: function() {
                    alert('Failed to update product status.');
                    // revert checkbox if failed
                    checkbox.prop('checked', !isActive);
                }
            });
        }

        function showProductDetails(productId) {
            $.get(`/Products/GetById/${productId}`, function(p) {
                $('#detailName').text(p.name);
                $('#detailDescription').text(p.description || '');
                $('#detailPrice').text(p.price != null ? parseFloat(p.price).toFixed(2) : '0.00');
                $('#detailStock').text(p.stockQuantity);
                $('#detailCategory').text(p.categoryName || '');
                $('#detailSupplier').text(p.supplierName || '');
                $('#detailCreatedAt').text(p.createdAt);
                $('#detailCreatedBy').text(p.createdBy || '');
                $('#detailUpdatedAt').text(p.updatedAt || '');
                $('#detailUpdatedBy').text(p.updatedBy || '');
                $('#detailIsActive').prop('checked', p.isActive);

                new bootstrap.Modal(document.getElementById('productDetailsModal')).show();
            }).fail(function(xhr) {
                alert('Failed to load product details.');
                console.error(xhr.responseText);
            });
        }


        $('#btnConfirmDeleteProduct').click(function() {
            $.post('/Products/DeleteAjax/' + deleteProductId, function(response) {
                                if (response.success) {
                    $('#row_' + deleteProductId).remove();
                    var modalEl = document.getElementById('deleteProductModal');
                    if (modalEl.modalInstance) modalEl.modalInstance.hide();
                    showToast('Product deleted successfully!', 'danger');
                }
                else {
                    alert('Error deleting product: ' + (response.error || 'Unknown'));
                }
            });
        });

        function loadProducts() {
            $.get('/Products/GetAll', function(data) {
                console.log('Products data:', data);

                if (!data || !data.length) {
                    $('#productTable tbody').html('<tr><td colspan="6" class="text-center">No products found</td></tr>');
                    return;
                }

                let tbody = '';
                data.forEach(p => {
                    tbody += `<tr id="row_${p.id}">
                        <td>${p.name}</td>
                        <td>${p.categoryName || ''}</td>
                        <td>${p.supplierName || ''}</td>
                        <td>${p.price != null ? parseFloat(p.price).toFixed(2) : '0.00'}</td>
                        <td>${p.stockQuantity}</td>
                        <td>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="toggleActive_${p.id}" ${p.isActive ? 'checked' : ''} onchange="toggleActive(${p.id})">
                        </div>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-info" onclick="showProductDetails(${p.id})">Details</button>
                            <button class="btn btn-sm btn-warning" onclick="openEditProductModal(${p.id})">Edit</button>
                            <button class="btn btn-sm btn-danger" onclick="openDeleteProductModal(${p.id})">Delete</button>
                        </td>
                    </tr>`;
                });
                $('#productTable tbody').html(tbody);
            }).fail(function(xhr) {
                console.error('Failed to load products:', xhr.responseText);
            });
        }

    function showToast(message, type = 'success') {
            const toastEl = document.getElementById('productToast');
            const toastBody = document.getElementById('productToastBody');

            // Reset classes
            toastEl.classList.remove('bg-success', 'bg-danger', 'bg-secondary');

            // Set color based on type
            if(type === 'success') toastEl.classList.add('bg-success');       // Add/Edit
            else if(type === 'danger') toastEl.classList.add('bg-danger');    // Delete
            else if(type === 'secondary') toastEl.classList.add('bg-secondary'); // Inactive

            toastBody.textContent = message;

            const toast = new bootstrap.Toast(toastEl, { delay: 3000 });
            toast.show();
        }


        $(document).ready(function() {
            loadProducts();
        });

    </script>
}
