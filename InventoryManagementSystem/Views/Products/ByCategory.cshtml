@model List<InventoryManagementSystem.Data.Product>
@{
    var categoryName = ViewData["CategoryName"] as string;
    var categoryId = ViewData["CategoryId"];
    ViewData["Title"] = $"Products in {categoryName}";

}

<div class="position-fixed top-0 end-0 p-3" style="z-index: 1080;">
    <div id="productToast" class="toast align-items-center text-white border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body" id="productToastBody">
                <!-- Message goes here -->
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<div class="container my-4">

    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold text-primary">
            <i class="bi bi-tags me-2"></i> Products in "@categoryName"
        </h2>

        <div class="d-flex gap-2">
            <a href="/Categories/Index" class="btn btn-outline-secondary shadow-sm">
                <i class="bi bi-arrow-left me-1"></i> Back
            </a>
            <button class="btn btn-success shadow-sm" onclick="openAddProductModal(@categoryId)">
                <i class="bi bi-plus-circle me-1"></i> Add Product
            </button>
        </div>
    </div>

    <input type="hidden" id="currentCategoryId" value="@categoryId" />
    <div class="row" id="productsContainer">
        @if (!Model.Any())
        {
            <div class="col-12 text-center text-muted">No products found in this category.</div>
        }
        else
        {
            @foreach (var p in Model)
            {
                <div class="col-md-4 mb-3" id="productCard_@p.Id">
                    <div class="card shadow-sm h-100">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@p.Name</h5>
                            <p class="card-text">@p.Description</p>
                            <p class="mb-1"><strong>Price:</strong> @p.Price.ToString("0.00")</p>
                            <p class="mb-1"><strong>Stock:</strong> @p.StockQuantity</p>
                            <p class="mb-1"><strong>Supplier:</strong> @p.Supplier?.Name</p>

                            <div class="mt-auto d-flex gap-2">
                                <button class="btn btn-sm btn-primary w-100" onclick="showProductDetails(@p.Id)">
                                    <i class="bi bi-eye me-1"></i> Details
                                </button>
                                <button class="btn btn-sm btn-warning w-100" onclick="openEditProductModal(@p.Id)">
                                    <i class="bi bi-pencil me-1"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-danger w-100" onclick="openDeleteProductModal(@p.Id)">
                                    <i class="bi bi-trash me-1"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<!-- Add/Edit Modal -->
<div class="modal fade" id="productModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content shadow">
            <form id="productForm">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="productModalTitle">Add Product</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="productId" />
                    <input type="text" id="productName" class="form-control mb-2" placeholder="Name" />
                    <textarea id="productDescription" class="form-control mb-2" placeholder="Description"></textarea>
                    <input type="number" id="productPrice" step="0.01" min="0" class="form-control mb-2" placeholder="Price">
                    <input type="number" id="productStock" min="1" class="form-control mb-2" placeholder="Stock Quantity">
                    <select id="productCategory" class="form-select mb-2"></select>
                    <select id="productSupplier" class="form-select mb-2"></select>
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnSaveProduct" class="btn btn-primary shadow-sm">
                        <i class="bi bi-save me-1"></i> Save
                    </button>
                    <button type="button" class="btn btn-secondary shadow-sm" data-bs-dismiss="modal">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Details Modal -->
<div class="modal fade" id="productDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title">Product Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p><strong>Name:</strong> <span id="detailName"></span></p>
                <p><strong>Description:</strong> <span id="detailDescription"></span></p>
                <p><strong>Price:</strong> $<span id="detailPrice"></span></p>
                <p><strong>Stock Quantity:</strong> <span id="detailStock"></span></p>
                <p><strong>Category:</strong> <span id="detailCategory"></span></p>
                <p><strong>Supplier:</strong> <span id="detailSupplier"></span></p>
                <p><strong>Created At:</strong> <span id="detailCreatedAt"></span></p>
                <p><strong>Created By:</strong> <span id="detailCreatedBy"></span></p>
                <p><strong>Updated At:</strong> <span id="detailUpdatedAt"></span></p>
                <p><strong>Updated By:</strong> <span id="detailUpdatedBy"></span></p>
                <p><strong>Is Active:</strong> <input type="checkbox" id="detailIsActive" disabled></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- Deletes Modal -->
<div class="modal fade" id="deleteProductModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Delete Product</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this product?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="btnConfirmDeleteProduct">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let deleteProductId = 0;

        // Open Add Product modal
    function openAddProductModal(categoryId) {
            $('#productModalTitle').text('Add Product');
            $('#productId').val(0);
            $('#productName').val('');
            $('#productDescription').val('');
            $('#productPrice').val('');
            $('#productStock').val('');

            // Load dropdowns
                    $.get('/Suppliers/GetAll', function(suppliers){
                let options = '<option value="">Select Supplier</option>';
                suppliers
                    .filter(s => s.isActive) // only active suppliers
                    .forEach(s => options += `<option value="${s.id}">${s.name}</option>`);
                $('#productSupplier').html(options);
            });

            // Set category read-only
            $.get(`/Categories/GetAll`, function(categories){
                let category = categories.find(c => c.id == categoryId);
                $('#productCategory').html(`<option value="${category.id}" selected>${category.name}</option>`).prop('disabled', true);
            });

            new bootstrap.Modal(document.getElementById('productModal')).show();
        }

        // Open Edit Product modal
    function openEditProductModal(id) {
            $.get(`/Products/GetById/${id}`, function(p){
                $('#productModalTitle').text('Edit Product');
                $('#productId').val(p.id);
                $('#productName').val(p.name);
                $('#productDescription').val(p.description);
                $('#productPrice').val(p.price);
                $('#productStock').val(p.stockQuantity);

                // Category read-only
                $('#productCategory').html(`<option value="${p.categoryId}" selected>${p.categoryName}</option>`).prop('disabled', true);

                // Suppliers
                 $.get('/Suppliers/GetAll', function(suppliers){
                    let options = '<option value="">Select Supplier</option>';
                    suppliers
                        .filter(s => s.isActive) // only active suppliers
                        .forEach(s => {
                            const selected = s.id === p.supplierId ? 'selected' : '';
                            options += `<option value="${s.id}" ${selected}>${s.name}</option>`;
                        });
                    $('#productSupplier').html(options);
                });
                new bootstrap.Modal(document.getElementById('productModal')).show();
            }).fail(()=> alert('Failed to load product'));
        }

      $('#btnSaveProduct').click(function(){
            const productId = parseInt($('#productId').val());
            const isEdit = productId > 0;

            var product = {
                id: productId,
                name: $('#productName').val(),
                description: $('#productDescription').val(),
                price: $('#productPrice').val() ? parseFloat($('#productPrice').val()) : null,
                stockQuantity: $('#productStock').val() ? parseInt($('#productStock').val()) : null,
                categoryId: parseInt($('#productCategory').val()),
                supplierId: parseInt($('#productSupplier').val())
            };

            $.ajax({
                type: 'POST',
                url: '/Products/CreateOrEdit',
                contentType: 'application/json',
                data: JSON.stringify(product),
                success: function(resp){
                    if(resp.success){
                        $('#productModal').modal('hide');
                        const categoryId = $('#currentCategoryId').val();
                        loadProductsByCategory(categoryId);

                        // Show toast
                        const msg = isEdit ? 'Product updated successfully!' : 'Product added successfully!';
                        showToast(msg, 'success');
                    } else {
                        alert(resp.error || 'Error saving product');
                    }
                },
                error: function(){
                    alert('Unexpected error');
                }
            });
        });

        function showProductDetails(productId) {
             $.get(`/Products/GetById/${productId}`, function(p) {
                 $('#detailName').text(p.name);
                 $('#detailDescription').text(p.description || '');
                 $('#detailPrice').text(p.price != null ? parseFloat(p.price).toFixed(2) : '0.00');
                 $('#detailStock').text(p.stockQuantity);
                 $('#detailCategory').text(p.categoryName || '');
                 $('#detailSupplier').text(p.supplierName || '');
                 $('#detailCreatedAt').text(p.createdAt);
                 $('#detailCreatedBy').text(p.createdBy || '');
                 $('#detailUpdatedAt').text(p.updatedAt || '');
                 $('#detailUpdatedBy').text(p.updatedBy || '');
                 $('#detailIsActive').prop('checked', p.isActive);

                 new bootstrap.Modal(document.getElementById('productDetailsModal')).show();
             }).fail(function(xhr) {
                 alert('Failed to load product details.');
                 console.error(xhr.responseText);
             });
         }

        function openDeleteProductModal(id) {
            deleteProductId = id;
            const modalEl = document.getElementById('deleteProductModal');
            const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
            modal.show();
        }
                $('#btnConfirmDeleteProduct').click(function() {
            $.post('/Products/DeleteAjax/' + deleteProductId, function(response) {
                if (response.success) {
                    $(`#productCard_${deleteProductId}`).remove();
                    showToast('Product deleted successfully!', 'danger');
                    const modalEl = document.getElementById('deleteProductModal');
                    bootstrap.Modal.getInstance(modalEl).hide();
                } else {
                    alert('Error deleting product');
                }
            });
        });
    
        function loadProductsByCategory(categoryId) {
            $.get(`/Products/GetByCategory/${categoryId}`, function (data) {
                let html = '';
                if (data.length === 0) {
                    html = `<div class="col-12 text-center text-muted">No products found in this category.</div>`;
                } else {
                    data.forEach(p => {
                        html += `
                        <div class="col-md-4 mb-3" id="productCard_${p.id}">
                            <div class="card shadow-sm h-100">
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title">${p.name}</h5>
                                    <p class="card-text">${p.description || ''}</p>
                                    <p class="mb-1"><strong>Price:</strong> ${p.price != null ? parseFloat(p.price).toFixed(2) : '0.00'}</p>
                                    <p class="mb-1"><strong>Stock:</strong> ${p.stockQuantity}</p>
                                    <p class="mb-1"><strong>Supplier:</strong> ${p.supplierName || ''}</p>

                                    <div class="mt-auto d-flex gap-2">
                                        <button class="btn btn-sm btn-primary w-100" onclick="showProductDetails(${p.id})">
                                            <i class="bi bi-eye me-1"></i> Details
                                        </button>
                                        <button class="btn btn-sm btn-warning w-100" onclick="openEditProductModal(${p.id})">
                                            <i class="bi bi-pencil me-1"></i> Edit
                                        </button>
                                        <button class="btn btn-sm btn-danger w-100" onclick="openDeleteProductModal(${p.id})">
                                            <i class="bi bi-trash me-1"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>`;
                    });
                }
                $('#productsContainer').html(html);
            }).fail(() => {
                alert('Failed to load products for this category.');
            });
        }

        function showToast(message, type = 'success') {
                        const toastEl = document.getElementById('productToast');
                        const toastBody = document.getElementById('productToastBody');

                        // Reset classes
                        toastEl.classList.remove('bg-success', 'bg-danger', 'bg-secondary');

                        // Set color based on type
                        if(type === 'success') toastEl.classList.add('bg-success');       // Add/Edit
                        else if(type === 'danger') toastEl.classList.add('bg-danger');    // Delete
                        else if(type === 'secondary') toastEl.classList.add('bg-secondary'); // Inactive

                        toastBody.textContent = message;

                        const toast = new bootstrap.Toast(toastEl, { delay: 3000 });
                        toast.show();
                    }

       $(document).ready(function() {
            const categoryId = $('#currentCategoryId').val();
            loadProductsByCategory(categoryId);
        });

    </script>
}
