@{
    ViewData["Title"] = "Create Order";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center">
        <h3>Create New Order</h3>
        <a href="/Orders" class="btn btn-outline-secondary">Back to Order List</a>
    </div>
    <hr />

    <form id="orderForm">

        <!-- Order Info Section -->
        <div class="mb-3">
            <label class="form-label fw-bold">Order Date</label>
            <input type="text" class="form-control" id="orderDate" value="@DateTime.Now.ToString("yyyy-MM-dd")" readonly />
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">Total Amount</label>
            <input type="text" class="form-control" id="totalAmount" value="0.00" readonly />
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">Status</label>
            <select class="form-select" id="orderStatus">
                <option value="1" selected>Pending</option>
                <option value="2">Processing</option>
                <option value="3">In Delivery</option>
                <option value="4">Delivered</option>
                <option value="5">Cancelled</option>
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">Customer</label>
            <select class="form-select" id="customerDropdown">
                <option value="">-- Select Customer --</option>
            </select>
        </div>

        <!-- Add Product Button -->
        <div class="mb-3">
            <button type="button" class="btn btn-primary" id="btnAddProduct">
                <i class="bi bi-plus-circle"></i> Add Product
            </button>
        </div>

        <!-- Order Details Section (Initially hidden) -->
        <div id="orderDetailsSection" class="d-none">
            <h5>Order Details</h5>
            <table class="table table-bordered align-middle" id="orderDetailsTable">
                <thead class="table-light">
                    <tr>
                        <th>#</th>
                        <th>Product</th>
                        <th>Unit Price</th>
                        <th>Available Stock</th>
                        <th>Quantity</th>
                        <th>Subtotal</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="orderDetailsBody"></tbody>
            </table>

            <!-- Confirm Order Button (only after products) -->
            <div class="mt-3">
                <button type="submit" class="btn btn-success">Confirm Order</button>
            </div>
        </div>
    </form>
</div>



@section Scripts {

    <script>


        $(document).ready(function () {
            let rowIndex = 0;
         toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "preventDuplicates": true,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };

            // Load customers dynamically
            $.get("/Orders/GetCustomers", function (customers) {
                let options = '<option value="">-- Select Customer --</option>';
                customers.forEach(c => {
                    options += `<option value="${c.id}">${c.name}</option>`;
                });
                $("#customerDropdown").html(options);
            });

            // Load products dynamically when adding a product row
         // Store all products once
        let allProducts = [];

        // Load products once on page load
        $.get("/Orders/GetProducts", function (products) {
            allProducts = products; // store for later use
        });

        // Function to get filtered options
        function getProductOptions(selectedIds, currentVal) {
            let options = '<option value="">-- Select Product --</option>';
            allProducts.forEach(p => {
                // Include if not selected yet or is the current value
                if (!selectedIds.includes(p.id.toString()) || p.id.toString() === currentVal) {
                    options += `<option value="${p.id}" data-price="${p.price}" data-stock="${p.stockQuantity}" ${p.id == currentVal ? "selected" : ""}>${p.name}</option>`;
                }
            });
            return options;
        }

        // Add product row
        $("#btnAddProduct").click(function () {
            $("#orderDetailsSection").removeClass("d-none");

            // Get already selected product IDs
            let selectedIds = [];
            $(".productDropdown").each(function () {
                let val = $(this).val();
                if (val) selectedIds.push(val);
            });

            rowIndex++;
            let row = `
            <tr data-row="${rowIndex}">
                <td>${rowIndex}</td>
                <td>
                    <select class="form-select productDropdown">
                        ${getProductOptions(selectedIds, "")}
                    </select>
                </td>
                <td><input type="text" class="form-control unitPrice" readonly /></td>
                <td><input type="text" class="form-control stock" readonly /></td>
                <td><input type="number" class="form-control quantity" value="1" min="1" /></td>
                <td><input type="text" class="form-control subtotal" readonly /></td>
                <td><button type="button" class="btn btn-danger btn-sm btnRemove">Remove</button></td>
            </tr>`;

            $("#orderDetailsBody").append(row);
            toastr.success("Product row added!");
        });


        // When quantity changes
            $(document).on("input", ".quantity", function () {
                let row = $(this).closest("tr");
                let qty = parseInt($(this).val()) || 0;
                let stock = parseInt(row.find(".stock").val()) || 0;

                if (qty > stock) {
                    toastr.warning("Quantity exceeds available stock!"); //  Toast inside check
                    $(this).val(stock);
                    qty = stock;
                }

                let price = parseFloat(row.find(".unitPrice").val()) || 0;
                row.find(".subtotal").val((qty * price).toFixed(2));
                recalcTotal();
            });

            // Calculate one row subtotal
            function calculateRowSubtotal(row) {
                let qty = parseInt(row.find(".quantity").val()) || 0;
                let price = parseFloat(row.find(".unitPrice").val()) || 0;
                let subtotal = qty * price;
                row.find(".subtotal").val(subtotal.toFixed(2));
                recalcTotal();
            }

            // Recalculate total
            function recalcTotal() {
                let total = 0;
                $(".subtotal").each(function () {
                    total += parseFloat($(this).val()) || 0;
                });
                $("#totalAmount").val(total.toFixed(2));
            }

            // Reset row numbers after deletion
            function resetRowNumbers() {
                $("#orderDetailsBody tr").each(function (i, row) {
                    $(row).find("td:first").text(i + 1);
                });
                rowIndex = $("#orderDetailsBody tr").length;
            }

            // Submit form (AJAX)
                $("#orderForm").submit(function (e) {
            e.preventDefault();

            if ($("#orderDetailsBody tr").length === 0) {
                toastr.error("Please add at least one product before confirming.");
                return;
            }

            let order = {
                customerId: parseInt($("#customerDropdown").val()),
                status: parseInt($("#orderStatus").val()),
                orderDetails: []
            };

            $("#orderDetailsBody tr").each(function () {
                let row = $(this);
                order.orderDetails.push({
                    productId: parseInt(row.find(".productDropdown").val()),
                    unitPrice: parseFloat(row.find(".unitPrice").val()),
                    quantity: parseInt(row.find(".quantity").val())
                });
            });

            $.ajax({
                url: "/Orders/Create",
                type: "POST",
                data: JSON.stringify(order),
                contentType: "application/json",
                success: function(res) {
                    window.location.href = "/Orders";
                },
                error: function(xhr) {
                    toastr.error(xhr.responseText || "Failed to save order");
                }
            });
        });

                //  Update product dropdowns to exclude already selected products
        function updateProductDropdowns() {
            // Get all selected product IDs
            let selectedIds = [];
            $(".productDropdown").each(function () {
                let val = $(this).val();
                if (val) selectedIds.push(val);
            });

            // Update options for each dropdown
            $(".productDropdown").each(function () {
                let currentVal = $(this).val();
                let dropdown = $(this);

                // Reload full product options from server
                $.get("/Orders/GetProducts", function (products) {
                    let options = '<option value="">-- Select Product --</option>';
                    products.forEach(p => {
                        // Skip products selected in other rows
                        if (!selectedIds.includes(p.id.toString()) || p.id.toString() === currentVal) {
                            options += `<option value="${p.id}" data-price="${p.price}" data-stock="${p.stockQuantity}" ${p.id == currentVal ? "selected" : ""}>${p.name}</option>`;
                        }
                    });
                    dropdown.html(options);
                });
            });
        }

        // 🔹 Call update whenever a product is selected or changed
        $(document).on("change", ".productDropdown", function () {
            let row = $(this).closest("tr");
            let price = $(this).find(":selected").data("price") || 0;
            let stock = $(this).find(":selected").data("stock") || 0;

            row.find(".unitPrice").val(price.toFixed(2));
            row.find(".stock").val(stock);
            row.find(".quantity").val(1);
            calculateRowSubtotal(row);

            updateProductDropdowns(); // refresh all dropdowns
        });

        // 🔹 Also call after removing a row
        $(document).on("click", ".btnRemove", function () {
            $(this).closest("tr").remove();
            recalcTotal();
            resetRowNumbers();
            toastr.info("Product row removed!");
            updateProductDropdowns(); // refresh available products
        });

        });

    </script>
}
